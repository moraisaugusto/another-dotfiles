

" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime! plugin/python_setup.vim

" load plugins from vundle
source ~/.vim/plugins.vim
source ~/.vim/plug-config/coc.vim

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','

set history=1000 " change history to 1000

" always use unix format
set fileformat=unix

" Tab control
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set expandtab " convert tabs to spaces for <Tab>
set completeopt+=longest

if has('mouse')
    set mouse=a
    if !has('nvim')
        set ttymouse=xterm2
    endif
endif


set clipboard=unnamedplus

" faster redrawing
set ttyfast

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Persistent undo
if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
  endif

" file type specific settings
if has('autocmd') && !exists('autocommands_loaded')
    let autocommands_loaded = 1
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab
    "autocmd FileType *.md.js :call SyntasticReset<cr>
    autocmd FileType markdown setlocal textwidth=0 wrapmargin=0 wrap spell
    autocmd FileType .xml exe ":silent %!xmllint --format --recover - 2>/dev/null"
    autocmd FileType crontab setlocal nobackup nowritebackup

    " automatically resize panes on resize
    autocmd VimResized * exe 'normal! \<c-w>='
    autocmd BufWritePost .vimrc source %
    autocmd BufWritePost .vimrc.local source %
    " save all files on focus lost, ignoring warnings about untitled buffers
    autocmd FocusLost * silent! wa

    autocmd BufNewFile,BufRead *.ejs set filetype=html
    autocmd BufNewFile,BufRead *.ino set filetype=c
    autocmd BufNewFile,BufRead *.svg set filetype=xml

    " make quickfix windows take all the lower section of the screen when there
    " are multiple windows open
    autocmd FileType qf wincmd J

    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'stylus', 'html']

endif

"" code folding settings
set foldmethod=indent " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

"snipMate - snippets
let g:snipMate = { 'snippet_version' : 1 }
let g:snipMate = get(g:, 'snipMate', {}) " Allow for vimrc re-sourcing
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['html'] = 'html'
"ActivateAddons vim-snippets snipmate
if !exists('g:snips_author')
    let g:snips_author = 'Augusto Morais'
    let g:snips_author_email = 'augusto at morais.io'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set so=7 " set 7 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set scrolloff=3 " lines of text around cursor
set shell=$SHELL
set cmdheight=1 " command bar height

set title " set terminal title

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

"set magic " Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

" switch syntax highlighting on
syntax enable

set encoding=utf8

" theme
set background=dark

set number " show the current line number"
set relativenumber " show relative line numbers

"set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking
set colorcolumn=120 " show column width
set autoindent " automatically set indent of new line
set smartindent

set laststatus=2 " show the satus line all the time


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => text limits (disable by default)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set textwidth=99
"augroup vimrc_autocmds
"autocmd BufRead * highlight OverLength ctermbg=darkgrey guibg=#592929
"autocmd BufRead * match OverLength /\%100v.*/
"augroup END
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups, and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.tmp,~/tmp,/var/tmp,/tmp


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Languages - YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F8> : !gcc -lstdc++ -lm % && ./a.out <CR>

let g:loaded_youcompleteme = 1
"let g:ycm_server_python_interpreter = $HOME"/.asdf/shims/python"
let g:ycm_server_python_interpreter = $HOME.'/miniconda/bin/python'
let g:ycm_global_ycm_extra_conf = $HOME"/.vim/.ycm_extra_conf.py"
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
" let b:ycm_largefile=1
" for debug
let g:ycm_keep_logfiles = 1
let g:ycm_log_level = 'debug'
let g:pymode_rope_complete_on_dot = 0

" color coded
let g:color_coded_enabled = 1
let g:color_coded_filetypes = ['c', 'cpp', 'objc']

nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F6> :YcmForceCompileAndDiagnostics<CR>
""Do not ask when starting vim
let g:syntastic_always_populate_loc_list = 1
let g:ycm_collect_identifiers_from_tags_files = 1
set tags=.ctags


" Vimspector
let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector
" packadd! vimspector

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins - Gutentags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gutentags_enabled = 0
let g:gutentags_generate_on_missing = 1      " Generate a tags file if there is none.
let g:gutentags_generate_on_new = 0          " Don't regenerate tags file in a new Vim session (I tend to reopen Vim a lot).
let g:gutentags_generate_on_write = 1        " Do update the tags file on file save.
let g:gutentags_resolve_symlinks = 1
let g:gutentags_ctags_tagfile = '.ctags'
let g:gutentags_project_root = ['.git']
let g:gutentags_add_default_project_roots = 0
let g:gutentags_ctags_extra_args = ['--fields=+l']


" editorconfig
"let g:EditorConfig_core_mode= 'python_external'
"let g:EditorConfig_exec_path = $HOME"/.asdf/shims/editorconfig"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General mappings/shortcuts for functionality
" Additional, plugin-specific mappings are located under
" the plugins section

" shortcut to open a lib in new tab
nnoremap <silent><leader><C-]> <C-w><C-]><C-w>T

" Close the current buffer
noremap <C-x> :q<cr>

" remap esc
inoremap jk <esc>

" remove extra whitespace
nmap <leader><space> :%s/\s\+$<cr>

" wipout buffer
nmap <silent> <leader>b :bw<cr>

" shortcut to save
nmap <leader>, :w<cr>

" disable Ex mode
noremap Q <NOP>

" set paste toggle
set pastetoggle=<F6>

" toggle paste mode
map <leader>v :set paste!<cr>

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>

" edit vim plugins
map <leader>evp :e! ~/.vim/plugins.vim<cr>

" edit vim functions - disable by default
"map <leader>evf :e! ~/.vim/functions.vim<cr>

" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" clear highlighted search
noremap <space> :set hlsearch! hlsearch?<cr>

" activate spell-checking alternatives
nmap ;se :set invspell spelllang=en<cr>
nmap ;sp :set invspell spelllang=pt_br<cr>

" toggle invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
"highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>l :set list!<cr>

" switch between current and last buffer
nmap <leader>. <c-^>

" enable . command in visual mode
vnoremap . :normal .<cr>

" navigate between windows
map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>


" rewrap content
nmap <leader>p {gq}
" map <C-r> {gq}

" toggle cursor line
set cursorline!
nnoremap <leader>i :set cursorline!<cr>

" scroll the viewport faster
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" search for word under the cursor
nnoremap <leader>/ "fyiw :/<c-r>f<cr>

" inoremap <tab> <c-r>=Smart_TabComplete()<CR>

map <leader>r :call RunCustomCommand()<cr>
"map <leader>s :call SetCustomCommand()<cr>
let g:silent_custom_command = 0

" helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
nmap \s :set ts=4 sts=4 sw=4 et<cr>

" Centralize textfile
let g:goyo_width = '50%'
let g:goyo_height = '45%'

nmap <leader>w :Goyo <cr>
"nmap <leader>w :setf textile<cr> :Goyo 50%x45%<cr>

" format json
map <leader>fj :%!jq '.' <CR>

" enable javascript syntax
map <leader>ejs :set ft=javascript<CR>

" Move lines - Meta keys
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-k> <Esc>:m .-2<CR>==gi
inoremap <M-j> <Esc>:m .+1<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Permanent 'very magic' mode
"nnoremap / /\v
"vnoremap / /\v
"cnoremap %s/ %smagic/
"cnoremap \>s/ \>smagic/
"nnoremap :g/ :g/\v
"nnoremap :g// :g//

" Unmapping keys
if !has('nvim')
    iunmap ê
    iunmap ë
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/.ctags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
  let resp = system(cmd)
endfunction

" update ctags from source code
function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/.ctags"
  let cmd = 'ctags -a -f ' . tagfilename . ' --c++-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
  call DelTagOfFile(f)
  let resp = system(cmd)
endfunction
autocmd BufWritePost *.cpp,*.h,*.c,*.py call UpdateTags()

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

" recursively search up from dirname, sourcing all .vimrc.local files along the way
function! ApplyLocalSettings(dirname)
    " convert windows paths to unix style
    let l:curDir = substitute(a:dirname, '\\', '/', 'g')

    " walk to the top of the dir tree
    let l:parentDir = strpart(l:curDir, 0, strridx(l:curDir, '/'))
    if isdirectory(l:parentDir)
        call ApplyLocalSettings(l:parentDir)
    endif

    " now walk back down the path and source .vimsettings as you find them.
    " child directories can inherit from their parents
    let l:settingsFile = a:dirname . '/.vimrc.local'
    if filereadable(l:settingsFile)
        exec ':source' . l:settingsFile
    endif
endfunction

" smart tab completion
function! Smart_TabComplete()
    let line = getline('.')                         " current line

    let substr = strpart(line, -1, col('.')+1)      " from the start of the current
    " line to one character right
    " of the cursor
    let substr = matchstr(substr, '[^ \t]*$')       " word till cursor
    if (strlen(substr)==0)                          " nothing to match on empty string
        return '\<tab>'
    endif
    let has_period = match(substr, '\.') != -1      " position of period, if any
    let has_slash = match(substr, '\/') != -1       " position of slash, if any
    if (!has_period && !has_slash)
        return '\<C-X>\<C-P>'                         " existing text matching
    elseif ( has_slash )
        return '\<C-X>\<C-F>'                         " file matching
    else
        return '\<C-X>\<C-O>'                         " plugin matching
    endif
endfunction

" execute a custom command
function! RunCustomCommand()
    up
    if g:silent_custom_command
        execute 'silent !' . s:customcommand
    else
        execute '!' . s:customcommand
    endif
endfunction

function! SetCustomCommand()
    let s:customcommand = input('Enter Custom Command$ ')
endfunction

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

"hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
"hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
"hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
"hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
"hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
"hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

function! HtmlUnEscape()
  silent s/&lt;/</eg
  silent s/&gt;/>/eg
  silent s/&amp;/\&/eg
endfunction

nnoremap <silent> <leader>u :call HtmlUnEscape()<cr>

" goto tag new tab
:nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ack plugin
nnoremap <Leader>a :Ack!<Space>


" close NERDTred after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" remove some files by extension
let NERDTreeIgnore = ['\.js.map$', '\.pyc', '\.ctags', '\.tool-versions', '\.flake8', '\tags', '\.git', '\.pytest_cache', '__pycache__']
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" map fuzzyfinder (CtrlP) plugin
nmap <silent> <leader>t :CtrlP<cr>
nmap <silent> <leader>r :CtrlPBuffer<cr>
nnoremap <leader>n :CtrlPTag<cr>
let g:ctrlp_map='<leader>t'
""let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 1 

" CtrlP ignore patterns
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](.\git|.\hg|.\svn|node_modules|env|.env)$',
            \ 'file': '\v\.(exe|so|dll|o|aux|pyc)$',
            \ }

"" only show files that are not ignored by git
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_user_command = [
    \ '.git/', 'cd %s && git ls-files . -co --exclude-standard',
    \ 'find %s -type -f'
    \ ]
"
"" search the nearest ancestor that contains .git, .hg, .svn
"let g:ctrlp_working_path_mode = 2
" let g:ctrlp_max_depth=40
" let g:ctrlp_max_files=0

" ctrlp-py-matcher
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }


" jedi-vim plugin
" let g:jedi#use_tabs_not_buffers = 1
"let g:jedi#completions_enabled = 1
" let g:python_host_prog=$HOME"/.asdf/installs/python/2.7.15/bin/python"
"let g:python3_host_prog= $HOME.'/.asdf/shims/python'
let g:python3_host_prog= $HOME.'/miniconda/bin/python' 

" disable python 2 support
let g:loaded_python_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_node_provider = 0
let did_python_setup = 1



" Fugitive Shortcuts
nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>
set diffopt+=vertical

nmap <leader>m :MarkedOpen!<cr>
nmap <leader>mq :MarkedQuit<cr>

" toggle syntastic
nmap <leader>s :SyntasticToggleMode<cr>

" toggle Limelight
nmap <leader>f :Limelight!!<cr>

"let g:limelight_conceal_ctermfg = 'gray'
"let g:limelight_conceal_ctermfg = 240

" flake8 - PEP8
let no_flake8_maps = 0
autocmd FileType python map <buffer> <F3> :call Flake8()<CR>
let g:flake8_show_in_gutter=0  " show
let g:flake8_show_in_file=0  " show
let g:flake8_max_markers=50

"tagbar
nmap <F7> :TagbarToggle<CR>


" allow es5 mode when looking at TypeScript
" let g:syntastic_typescript_tsc_args = '--module amd --target ES5 --noImplicitAny'
" let g:syntastic_typescript_checkers = ['tslint']
" let g:syntastic_javascript_checkers = ['jshint', 'jscs']
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 1
"let g:syntastic_enable_highlighting = 0
"let g:syntastic_echo_current_error = 0
"let g:syntastic_error_symbol='✗'
"let g:syntastic_warning_symbol='⚠'


" don't hide quotes in json files
let g:vim_json_syntax_conceal = 0

"let g:SuperTabCrMapping = 0

" Vim Latex Live Preview
autocmd Filetype tex setl updatetime=1000
let g:livepreview_previewer = 'zathura'
let g:livepreview_engine = 'pdflatex'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Themes (airline)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" airline options
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"let g:airline_skip_empty_sections = 1
let g:airline_theme='gruvbox_material'
"

" ale - show error
let g:airline#extensions#ale#enabled = 1
let g:ale_enabled = 1
let g:ale_set_highlights = 0
let g:ale_linters = {
      \   'python': ['flake8', 'pylint']
      \}
noremap <leader>l :ALEToggle<CR>
" let g:ale_fixers = {'python': ['black', 'isort', 'trim_whitespace']}
let g:ale_fixers = {'python': ['black', 'trim_whitespace']}
let g:ale_fix_on_save = 0

" unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.crypt = '🔒'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.maxlinenr = '☰'
"let g:airline_symbols.maxlinenr = ''
"let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

"
"" powerline symbols
let g:airline_powerline_fonts = 1
"let g:airline_left_sep = ''
"let g:airline_right_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''

" GUI mode - Disabled
if (has("gui_running"))
    set background=light
else
    set background=dark
endif

" format statements with math symbols - only for python
map <leader>fm :<C-U>set conceallevel ?  :<C-U>setlocal conceallevel=1 : :<C-U>setlocal conceallevel=0<CR>
set conceallevel=0
function! RenderMathSymbols()
    if &conceallevel == 1
        setlocal conceallevel=0
        echo "ConcealLevel off"
    else
        setlocal conceallevel=1
        echo "ConcealLevel on"
    endif
endfunction
"
map <leader>fm :call RenderMathSymbols()<CR>

call ApplyLocalSettings(expand('.'))

" system font - disabled
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 11
" set guifont=SourceCodePro-Regular

" webdev icons
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enabl = 0
let g:WebDevIconsUnicodeDecorateFolderNodes = 0
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

" Truecolors
set termguicolors

" Vim colorscheme
"set background=dark
"colorscheme jellybeans
"colorscheme tokyonight
"colorscheme spaceduck
"let g:nord_uniform_status_lines = 0
"colorscheme skyfall
colorscheme gruvbox-material
let g:gruvbox_material_enable_italic = 1

" Protect large files from sourcing and other overhead.
" Files become read only
if !exists("my_auto_commands_loaded")
  let my_auto_commands_loaded = 1
  " Large files are > 10M
  " Set options:
  " eventignore+=FileType (no syntax highlighting etc
  " assumes FileType always on)
  " noswapfile (save copy of file)
  " bufhidden=unload (save memory when other file is viewed)
  " buftype=nowrite (file is read-only)
  " undolevels=-1 (no undo possible)
  let g:LargeFile = 1024 * 1024 * 10
  augroup LargeFile
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) > g:LargeFile | set eventignore+=FileType | setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 | else | set eventignore-=FileType | endif
    augroup END
  endif

